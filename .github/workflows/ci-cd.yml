name: 🚀 MySQL MCP Universal CI/CD

on:
  push:
    branches: [ main, develop ]
  pull_request:
    branches: [ main ]
  release:
    types: [ published ]

jobs:
  test:
    name: 🧪 Test on ${{ matrix.os }} - Node ${{ matrix.node }}
    runs-on: ${{ matrix.os }}
    
    strategy:
      matrix:
        os: [ubuntu-latest, windows-latest, macos-latest]
        node: [18, 20, 22]
    
    services:
      mysql:
        image: mysql:8.0
        env:
          MYSQL_ROOT_PASSWORD: test123
          MYSQL_DATABASE: testdb
        ports:
          - 3306:3306
        options: >-
          --health-cmd="mysqladmin ping"
          --health-interval=10s
          --health-timeout=5s
          --health-retries=3

    steps:
    - name: 📥 Checkout Repository
      uses: actions/checkout@v4

    - name: 🟢 Setup Node.js ${{ matrix.node }}
      uses: actions/setup-node@v4
      with:
        node-version: ${{ matrix.node }}
        cache: 'npm'

    - name: 📦 Install Dependencies
      run: npm ci

    - name: 🔍 Lint Code
      run: npm run lint --if-present

    - name: 🧪 Run Tests
      run: npm test
      env:
        MYSQL_HOST: 127.0.0.1
        MYSQL_USER: root
        MYSQL_PASSWORD: test123
        MYSQL_PORT: 3306

    - name: ✅ Test MCP Server Startup
      run: |
        timeout 10s node main-universal.cjs || true
      shell: bash

  security:
    name: 🔒 Security Audit
    runs-on: ubuntu-latest
    
    steps:
    - name: 📥 Checkout Repository
      uses: actions/checkout@v4
      
    - name: 🟢 Setup Node.js
      uses: actions/setup-node@v4
      with:
        node-version: 20
        cache: 'npm'
        
    - name: 📦 Install Dependencies
      run: npm ci
      
    - name: 🔍 Security Audit
      run: npm audit --audit-level moderate
      
    - name: 🛡️ Check for vulnerabilities
      run: npm audit --json > audit.json
      
    - name: 📊 Upload Audit Results
      uses: actions/upload-artifact@v3
      if: always()
      with:
        name: security-audit
        path: audit.json

  publish:
    name: 📦 Publish to NPM
    needs: [test, security]
    runs-on: ubuntu-latest
    if: github.event_name == 'release'
    
    steps:
    - name: 📥 Checkout Repository
      uses: actions/checkout@v4
      
    - name: 🟢 Setup Node.js
      uses: actions/setup-node@v4
      with:
        node-version: 20
        registry-url: 'https://registry.npmjs.org'
        
    - name: 📦 Install Dependencies
      run: npm ci
      
    - name: 🔖 Verify Version
      run: |
        PACKAGE_VERSION=$(node -p "require('./package.json').version")
        TAG_VERSION=${GITHUB_REF#refs/tags/v}
        if [ "$PACKAGE_VERSION" != "$TAG_VERSION" ]; then
          echo "❌ Version mismatch: package.json ($PACKAGE_VERSION) vs tag ($TAG_VERSION)"
          exit 1
        fi
        echo "✅ Version verified: $PACKAGE_VERSION"
      
    - name: 🚀 Publish to NPM
      run: npm publish --access public
      env:
        NODE_AUTH_TOKEN: ${{ secrets.NPM_TOKEN }}
        
    - name: 📢 Create GitHub Release Notes
      uses: actions/github-script@v7
      with:
        script: |
          const fs = require('fs');
          const changelog = fs.readFileSync('CHANGELOG.md', 'utf8');
          const version = process.env.GITHUB_REF.replace('refs/tags/v', '');
          
          github.rest.repos.updateRelease({
            owner: context.repo.owner,
            repo: context.repo.repo,
            release_id: context.payload.release.id,
            body: `## 🚀 MySQL MCP Universal ${version}\n\n${changelog.split('##')[1] || 'See CHANGELOG.md for details'}`
          });

  docker:
    name: 🐳 Build Docker Image
    needs: [test]
    runs-on: ubuntu-latest
    if: github.event_name == 'release'
    
    steps:
    - name: 📥 Checkout Repository
      uses: actions/checkout@v4
      
    - name: 🐳 Set up Docker Buildx
      uses: docker/setup-buildx-action@v3
      
    - name: 🔑 Login to Docker Hub
      uses: docker/login-action@v3
      with:
        username: ${{ secrets.DOCKERHUB_USERNAME }}
        password: ${{ secrets.DOCKERHUB_TOKEN }}
        
    - name: 🏷️ Extract metadata
      id: meta
      uses: docker/metadata-action@v5
      with:
        images: mysqlmcp/universal
        tags: |
          type=ref,event=branch
          type=ref,event=pr
          type=semver,pattern={{version}}
          type=semver,pattern={{major}}.{{minor}}
          
    - name: 🔨 Build and push
      uses: docker/build-push-action@v5
      with:
        context: .
        platforms: linux/amd64,linux/arm64
        push: true
        tags: ${{ steps.meta.outputs.tags }}
        labels: ${{ steps.meta.outputs.labels }}

  notification:
    name: 📢 Notify Success
    needs: [publish, docker]
    runs-on: ubuntu-latest
    if: always() && github.event_name == 'release'
    
    steps:
    - name: 🎉 Notify Success
      if: needs.publish.result == 'success'
      run: |
        echo "🎉 MySQL MCP Universal successfully published!"
        echo "📦 NPM: https://www.npmjs.com/package/mysql-mcp-universal"
        echo "🐳 Docker: https://hub.docker.com/r/mysqlmcp/universal"
